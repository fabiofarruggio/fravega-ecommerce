name: CI & Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'pom.xml'
      - 'src/main/**'
      - 'src/test/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_group:
        description: 'Grupo de tests a ejecutar (all, frontend, backend)'
        required: false
        default: 'all'

permissions:
  id-token: write
  contents: read
  packages: write
  pages: write

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  test:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      GOREST_TOKEN: ${{ secrets.GOREST_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine image tag
        id: image
        run: echo "tag=ghcr.io/${{ github.repository }}:main" >> $GITHUB_OUTPUT
        if: github.event_name == 'workflow_dispatch'

      - name: Set test groups
        id: test_groups
        run: |
          case "${{ github.event.inputs.test_group }}" in
            backend) echo "groups=backend" >> $GITHUB_OUTPUT ;;
            frontend) echo "groups=frontend" >> $GITHUB_OUTPUT ;;
            *) echo "groups=all" >> $GITHUB_OUTPUT ;;
          esac
        if: github.event_name == 'workflow_dispatch'

      - name: Pull image
        run: |
          docker pull ${{ needs.build.outputs.image_tag || steps.image.outputs.tag }}
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'

      - name: Run tests in container
        run: |
          if [[ "${{ steps.test_groups.outputs.groups }}" == "all" || "${{ github.event_name }}" == "push" ]]; then
            docker run --rm \
              -e GOREST_TOKEN \
              -v ${{ github.workspace }}/target:/usr/src/app/target \
              ${{ needs.build.outputs.image_tag || steps.image.outputs.tag }} \
              clean test
          else
            docker run --rm \
              -e GOREST_TOKEN \
              -v ${{ github.workspace }}/target:/usr/src/app/target \
              ${{ needs.build.outputs.image_tag || steps.image.outputs.tag }} \
              clean test -Dgroups=${{ steps.test_groups.outputs.groups }}
          fi
        shell: bash

      - name: Generate Allure report (single file)
        run: |
          docker run --rm \
            --entrypoint sh \
            -v ${{ github.workspace }}/target:/usr/src/app/target \
            ${{ needs.build.outputs.image_tag || steps.image.outputs.tag }} \
            -c "allure generate target/allure-results --clean -o target/allure-report --single-file"

      - name: Upload Allure results (raw)
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results

      - name: Upload Allure report (index.html only)
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report/index.html

  pages:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download single-file Allure report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: report

      - name: Prepare Pages content
        run: |
          mkdir -p .publish
          mv report/index.html .publish/index.html

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .publish

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
